/******************************************************************************/
#ifndef _POLYLINE_H_
#define _POLYLINE_H_
/******************************************************************************/

#include "EnginePreqs.h"
#include "IWireframeManager.h"

/******************************************************************************/
namespace MG
{

    /**
    -----------------------------------------------------------------------------
    折线对象监听器接口
    -----------------------------------------------------------------------------
    */
    class PolylineListener
    {
    public:
        virtual void onClear(Polyline* polyline){};
        virtual void onRebuild(Polyline* polyline){};

        virtual void onAdd(Polyline* polyline, size_t index){};
        virtual void onRemove(Polyline* polyline, size_t index){};
        virtual void onChanged(Polyline* polyline, size_t index){};
        virtual void onDestroy(Polyline* polyline){};
    };


    /**
    -----------------------------------------------------------------------------
    关键点数据结构
    -----------------------------------------------------------------------------
    */
    struct PolylinePoint {


        /// 折线中关键点类型
        enum  PolylinePointType
        {
            KP_NORMAL       = 0x000001,
            //设置为KP_INDEPENDENT后点关键点不参与各种自动生成
            KP_INDEPENDENT  = 0x000010, 
            KP_OUTSIDE_INTERSECT = 0x0F0000,
            KP_INNER_INTERSECT = 0x000100
        };	

        Vector3  position;
        Vector3  normal;
        Real     normalscale;
        PolylinePoint::PolylinePointType  type;

        PolylinePoint(void)
        {
            position = Vector3(0.0f,0.0f,0.0f);
            normal = Vector3(0.0f,0.0f,1.0f);
            normalscale = 1.0;
            type = KP_NORMAL ;
        }

        inline PolylinePoint& operator = ( const PolylinePoint& parameters )
        {
            position      = parameters.position;
            normal        = parameters.normal;
            normalscale   = parameters.normalscale;
            type          = parameters.type;
            return *this;
        }

        inline Bool operator == ( const PolylinePoint& parameters ) const { return this == &parameters; }
    };


    /**
    -----------------------------------------------------------------------------
    由一组点按照顺序形成的折线
    序号Index从0开始计算
    -----------------------------------------------------------------------------
    */
    class Polyline : public IPolyline
    {
    public:
        Polyline();
        virtual ~Polyline();

        /// 折线中自动生成法线的方向
        enum AutoGeneratedNormalDirection
        {
            NORT_XZ_LEFTDIR  = 0,
            NORT_XZ_RIGHTDIR = 1,

            NORT_XY_LEFTDIR  = 2,
            NORT_XY_RIGHTDIR = 3,

            NORT_ZY_LEFTDIR  = 4,
            NORT_ZY_RIGHTDIR = 5
        };

        /// 折线中自动生成法线的类型
        enum AutoGeneratedNormalType
        {
            NORT_BISECTOR      = 0,
            NORT_VERTICALNEXT  = 1,
            NORT_VERTICALPRIOR = 2
        };	

        /// 加入一个关键点到折线中最后个点后
        virtual void            addKeyPoint( Vec3 pos );
        /// 修改折线中相应关键点位置
        virtual void            setKeyPointPosition( Vec3 pos, Int index );

    public:

        /// 更新 
        void                    update( Real delta );
       
        /// 加入一个关键点到折线中最后个点后
        void                    addKeyPoint( const PolylinePoint&  parameters );
        /// 加入一个关键点到折线中最后个点后
        void                    addKeyPoint( Real dis );

        /// 得到折线中关键点参数按照索引
        const PolylinePoint&    getKeyPoint( size_t index );
        /// 得到折线中关键点的数量
        size_t                  getKeyPointCount();
        /// 得到折线中关键点的最大索引
        size_t                  getKeyPointMaxIndex();

        /// 得到所有折线中关键点
        std::list< PolylinePoint >& getAllKeyPoint(void);

        /// 清空所有折线中关键点
        void                    clearKeyPoints(void);
        /// 重构造所有折线中关键点
        void                    rebuildKeyPoints(const std::vector<PolylinePoint>& points);

        /// 设置自动生成法线方向
        void                    setAutoGeneratedNormalDirection(AutoGeneratedNormalDirection type);
        /// 设置自动生成法线方向
        AutoGeneratedNormalDirection getAutoGeneratedNormalDirection(void);

        /// 设置自动生成法线类型
        void                    setAutoGeneratedNormalType(AutoGeneratedNormalType type);
        /// 设置是否自动生成法线
        void                    setAutoGeneratedNormalEnable(Bool enable);
        /// 设置是否自动生成法线比例长度
        void                    setAutoGeneratedNormalScaleEnable(Bool enable);
        /// 更新法线 
        void                    updateAllNormal(void);

    protected:

        /// 插入一个点到折线中相应关键点后 
        void                    insertKeyPoint( size_t index, Real lastDis = 2.0 );
        /// 插入一个点到折线中相应关键点后
        void                    insertKeyPoint( const PolylinePoint&  parameters, size_t index );
        /// 去除折线中一个相应关键点
        void                    removeKeyPoint( size_t index );

        /// 修改折线中相应关键点位置
        void                    setKeyPointPosition( const Ogre::Vector3& point, size_t index );
        /// 修改折线中相应关键点位置
        void                    setKeyPointNormal( const Ogre::Vector3& normal, size_t index );
        /// 修改折线中相应关键点位置
        void                    setKeyPointType( PolylinePoint::PolylinePointType type, size_t index , Bool isCover = true );

    private:

        /** 建立法线 , 
        isEffectSideNormal: 是否影响旁边邻近的法线
        */
        void                    buildNormal( size_t index, Bool isEffectSideNormal);
        /// 建立所有法线
        void                    buildAllNormal(void);

        /// 建立指定索引关键的点的平分法线
        void                    buildBisectNormal( size_t index, Bool isEffectSideNormal );

        /// 建立指定索引关键的点的法线比例长度		
        void                    buildNormalScale( size_t index );

        /// 调整法线方向
        void                    adjustNormalDirection( size_t index );

    private:

        /// 检查折线关键点索引有效性
        Bool                    checkKeyPointIndexValid(size_t index);
        /// 得到折线关键点根据索引 
        PolylinePoint&          getRefKeyPoint(size_t index);

    public:

        /// 增加监听器
        void                    addListener(PolylineListener* lisn);
        /// 移除监听器
        void                    removeListener(PolylineListener* lisn);

    protected:

        /// 得到所有监听器
        std::vector<PolylineListener*> getAllListeners(void);

    private:
        void                    fireClear(void);
        void                    fireRebuild(void);
        void                    fireAdd(size_t index);
        void                    fireRemove(size_t index);
        void                    fireChanged(size_t index);
        void                    fireDestroy(void);

    private:

        /// 自动生成法线方向
        AutoGeneratedNormalDirection mAutoGeneratedNormalDirection;
        /// 自动生成法线类型
        AutoGeneratedNormalType mAutoGeneratedNormalType;
        /// 是否自动生成法线
        Bool mAutoGeneratedNormalEnable;
        /// 是否自动生成法线比例长度
        Bool mAutoGeneratedNormalScaleEnable;

        /// 折线中点列表
        typedef std::list< PolylinePoint > KeyPointList;
        KeyPointList mKeyPoints;

        /// 监听器列表
        typedef std::list<PolylineListener*> PolylineListenerList;
        PolylineListenerList mListeners;
    };

}

/******************************************************************************/

#endif
