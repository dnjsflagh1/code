/******************************************************************************/
#ifndef _CLIENTMANAGER_H_
#define _CLIENTMANAGER_H_
/******************************************************************************/

#include "FrontServerPreqs.h"
#include "LoginNetPacket.h"
#include "ClientObjectFactory.h"
#include "ClientObject.h"
/******************************************************************************/
namespace MG
{

 //   /******************************************************************************/
 //   //ClientConnectInfo对象
 //   /******************************************************************************/

 //   class ClientConnectInfo 
 //   {
 //   public:

 //       NetIdType   mNetId;

 //       ClientConnectInfo();
 //       virtual ~ClientConnectInfo();

 //       virtual void    onConnected(I32 id);
 //       virtual void    onDisConnected();
 //       virtual Bool    isConnected();
 //       virtual void    disConnected();
 //   };


	///******************************************************************************/
	////客户端对象
	///******************************************************************************/
 //   class ClientObject : public ClientConnectInfo
	//{
	//public:

	//	I32					connectTime;
	//	Bool volatile		isDestroy;
 //       
	//	Str16				accName;
	//	Str16				accPsw;
	//	U32					ipAddress;

 //       Player
	//	
	//	ClientObject(I32 id, U64 uin, U32 ip)
	//	{
	//		accName.reserve(MAX_ACCOUNT_LONGIN_NAME_LEN);
	//		accPsw.reserve(MAX_ACCOUNT_LONGIN_PSW_LEN);
	//		accName = L"";
	//		accPsw	= L"";
	//		netId	= id;
	//		ipAddress	= ip;
	//		revert(uin);
	//		
	//	}

	//	void revert(U64 uin)
	//	{
	//		isDestroy = false;
	//		addressUIN	= uin;
	//		connectTime = MGTimeOp::getCurrTick();
	//	}
	//	
	//	void destroy()
	//	{
	//		MG_LOG(out_info,"connect -> checkok time = %d\n",MGTimeOp::getCurrTick() - connectTime);
	//		isDestroy = true;
	//	}
	//};

    /******************************************************************************/
	// 失效：   
	//客户端管理
	//# 负责管理还未登入的客户端对象，主要职责为检测客户端登入超时。

	// 修改为：
	//# 由于需求的修改，主要职责用作检测健壮性，如客户端断开了连接，splayer还存在
	//# ClientObject 连接上的对象 已经不是未登录的对象 所以不用来检测超时
    /******************************************************************************/
    class ClientManager
    {
    public:

        SINGLETON_INSTANCE(ClientManager);
        ClientManager();
        virtual ~ClientManager();

    public:

        //-----------------------------------------------------------------------------------
        // Main
        //-----------------------------------------------------------------------------------

        Bool                    initialize();
        void                    uninitialize();
		void	                update();

        //-----------------------------------------------------------------------------------
        // Connect Base
        //-----------------------------------------------------------------------------------

        void	                onConnected(I32 id,NetAddress*address,INetConnect* connect);
        void	                onDisconnect(I32 id,INetConnect* connect);
        Bool	                processPacket(I32 id, NetEventRecv* packet,INetConnect* connect);

        //-----------------------------------------------------------------------------------
        // ClientObject Manager
        //-----------------------------------------------------------------------------------

        //增加和移除ClientObject对象
        void                    addClientObject(NetIdType netId, NetAddress*address,INetConnect* connect);
        void                    removeClientObject(NetIdType netId);
        void                    removeAllClientObject();

        Bool                    hasClientObject(NetIdType netId);
        Bool                    getClientObject(ClientObjectPtr& ptr, NetIdType netId);

       
        //-----------------------------------------------------------------------------------
        // TimeOut Check
        //-----------------------------------------------------------------------------------
        
		//检测客户端超时
		static void	            checkTimeOutThread(Ptr ptr); 

	private:

        ClientObjectFactory  mClientObjectFactory;
        std::map<NetIdType,ClientObjectPtr> mClientObjectMap;
        RWLocker    mClientObjectMapCs;

		OneThreadHandle mCheckTimeOutThread;

    };
}
#endif